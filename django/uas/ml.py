from sklearn import linear_model
import numpy as np

def hitung_aktuator1(a, b, c):
    X = np.array([
    [ -46.303, -2.3952222222222215, 46.279555555555554, 96.32133333333334, 148.2341111111111, 201.88288888888889, 234.03466666666668, 308.54344444444445, 304.6222222222222, 399.351 ],
    [ 0.0, 22.34422222222222, 42.06044444444444, 70.79366666666665, 80.99888888888889, 104.61611111111111, 139.2313333333333, 150.49155555555555, 169.85677777777778, 195.598 ],
    [ 0.0, 1.0681111111111112, 2.1442222222222225, 3.2833333333333337, 4.520444444444444, 5.334555555555555, 6.096666666666667, 8.084777777777779, 9.011888888888889, 10.272 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 12.17011111111111, 20.778222222222222, 31.297333333333327, 42.46044444444444, 57.21055555555556, 64.74666666666666, 71.87677777777778, 90.52288888888889, 90.589 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator2(a, b, c):
    X = np.array([
    [ 0.0, 57.42155555555556, 114.41611111111112, 154.56366666666668, 229.28022222222222, 252.14277777777778, 345.3733333333334, 424.46988888888893, 429.74444444444447, 450.277 ],
    [ 0.0, 10.892111111111111, 22.528222222222222, 33.99133333333333, 47.49344444444444, 52.970555555555556, 66.93766666666666, 79.99377777777777, 85.23488888888889, 96.774 ],
    [ 0.0, 57.629555555555555, 120.80311111111112, 158.54466666666667, 233.30522222222223, 263.0727777777778, 315.24233333333336, 364.0388888888889, 471.98544444444445, 502.89 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 21.07622222222222, 43.83244444444444, 67.26966666666665, 88.10188888888888, 109.58511111111112, 132.7303333333333, 160.95955555555554, 187.71777777777777, 216.872 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator3(a, b, c):
    X = np.array([
    [ 0.0, 2.8067777777777776, 5.760555555555555, 8.598333333333333, 10.74611111111111, 15.01588888888889, 16.163666666666664, 17.744444444444444, 22.33722222222222, 22.999 ],
    [ 0.0, 565.3955555555556, 1203.8291111111112, 1818.0386666666666, 2021.6362222222222, 2696.6967777777777, 3449.426333333333, 3648.110888888889, 4664.555444444444, 5382.644 ],
    [ 0.0, 1.1491111111111112, 2.1462222222222223, 3.0543333333333336, 4.615444444444445, 5.711555555555555, 6.278666666666667, 8.20577777777778, 8.181888888888889, 10.229 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 35.03333333333334, 61.35966666666667, 106.51, 138.85633333333334, 158.0436666666667, 185.421, 215.03233333333336, 253.5676666666667, 296.767 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator4(a, b, c):
    X = np.array([
    [ 0.0, 12.22011111111111, 20.947222222222223, 35.017333333333326, 46.74344444444444, 53.06755555555556, 64.09666666666666, 85.10477777777777, 80.69288888888889, 103.579 ],
    [ 0.0, 1.5895555555555556, 2.894111111111111, 4.616666666666667, 5.657222222222222, 7.177777777777778, 9.175333333333334, 9.86188888888889, 13.679444444444444, 13.074 ],
    [ 0.0, 110.04111111111112, 207.62322222222224, 350.02433333333335, 417.75944444444445, 583.5865555555555, 726.7876666666667, 753.1227777777779, 941.9048888888889, 1034.361 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 117.42511111111111, 201.44622222222222, 359.5003333333334, 488.7344444444445, 512.7585555555555, 693.8376666666668, 711.9337777777778, 819.4028888888889, 1028.621 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator5(a, b, c):
    X = np.array([
    [ 0.0, 10.680111111111112, 23.71622222222222, 34.23433333333333, 45.01244444444444, 59.031555555555556, 68.20266666666666, 71.68377777777778, 83.56588888888888, 97.518 ],
    [ 0.0, 5.612555555555556, 11.491111111111111, 16.072666666666663, 22.40422222222222, 28.21477777777778, 35.612333333333325, 39.29988888888889, 47.04844444444444, 46.229 ],
    [ 0.0, 104.82211111111111, 226.15522222222222, 366.21833333333336, 444.23844444444444, 554.7495555555555, 620.9306666666668, 801.6977777777778, 841.5418888888889, 1069.834 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 23.20422222222222, 43.65544444444444, 62.54166666666666, 97.07388888888889, 107.11111111111111, 134.8963333333333, 158.25055555555554, 186.47777777777776, 188.556 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator6(a, b, c):
    X = np.array([
    [ 0.0, 230.11422222222222, 461.91044444444447, 629.5916666666667, 806.2988888888889, 1156.662111111111, 1227.0793333333336, 1651.7265555555557, 1727.0157777777779, 1978.575 ],
    [ 0.0, 1.0731111111111111, 2.183222222222222, 3.4733333333333336, 4.687444444444445, 5.5135555555555555, 6.039666666666667, 7.142777777777779, 8.489888888888888, 9.518 ],
    [ 0.0, 40.296, 83.265, 116.597, 156.605, 202.428, 255.001, 302.762, 324.968, 324.793 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 0.5245555555555556, 1.168111111111111, 1.7586666666666668, 2.4262222222222225, 2.9127777777777775, 3.4323333333333337, 4.049888888888889, 4.718444444444445, 4.674 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator7(a, b, c):
    X = np.array([
    [ 0.0, 22.862222222222222, 48.61544444444444, 69.52666666666666, 83.95188888888889, 115.38311111111112, 137.9163333333333, 161.23955555555554, 165.90977777777778, 192.934 ],
    [ 0.0, 42.067, 82.834, 118.511, 149.003, 183.512, 223.197, 274.499, 334.727, 359.976 ],
    [ 0.0, 1.0761111111111112, 2.099222222222222, 3.3233333333333337, 4.057444444444444, 5.442555555555555, 6.744666666666667, 8.208777777777778, 8.77688888888889, 9.462 ]
    ])
    X = np.transpose(X)
    y = np.array([ 17.089, 19.47877777777778, 20.169555555555558, 20.372333333333334, 24.72811111111111, 24.15388888888889, 27.894666666666666, 25.91144444444444, 30.51522222222222, 35.11 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator8(a, b, c):
    X = np.array([
    [ 0.0, 12.11611111111111, 20.30622222222222, 32.71833333333333, 42.56044444444444, 60.928555555555555, 67.25866666666666, 74.14277777777777, 81.80088888888889, 98.875 ],
    [ 0.0, 501.72155555555554, 1035.6861111111111, 1523.2266666666665, 2161.3122222222223, 2887.6407777777777, 3106.257333333333, 4097.872888888889, 4328.096444444444, 5170.778 ],
    [ 0.0, 1.1631111111111112, 2.2782222222222224, 3.5373333333333337, 4.487444444444445, 6.007555555555555, 6.116666666666667, 7.225777777777779, 8.62488888888889, 9.941 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 2.2672222222222222, 4.366444444444444, 6.684666666666667, 8.866888888888889, 10.075111111111111, 12.051333333333334, 14.755555555555556, 16.60677777777778, 21.068 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator9(a, b, c):
    X = np.array([
    [ 0.0, 11.222111111111111, 22.03522222222222, 30.355333333333327, 47.855444444444444, 50.94755555555556, 69.68066666666665, 71.38077777777777, 84.09688888888888, 106.51 ],
    [ 0.0, 9.065, 18.383, 29.346, 37.879, 46.129, 62.278999999999996, 74.388, 75.179, 93.649 ],
    [ 0.0, 12.04411111111111, 21.98322222222222, 33.03933333333333, 46.78344444444444, 60.61955555555556, 64.42166666666665, 78.62177777777777, 95.83188888888888, 96.1 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 10.92811111111111, 21.08222222222222, 31.01133333333333, 43.17044444444444, 55.480555555555554, 63.87866666666666, 83.69877777777778, 80.98388888888888, 105.56700000000001 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator10(a, b, c):
    X = np.array([
    [ 0.0, 10.985111111111111, 20.75322222222222, 36.377333333333326, 46.98544444444444, 53.81955555555556, 65.60666666666665, 84.96277777777777, 94.59588888888888, 93.989 ],
    [ 0.0, 20.67822222222222, 42.162444444444446, 61.38266666666666, 82.81888888888889, 117.25511111111112, 144.1283333333333, 166.25655555555554, 192.05877777777778, 199.695 ],
    [ 0.0, 32.31433333333334, 65.53166666666667, 90.654, 141.96033333333335, 178.5896666666667, 211.772, 229.13233333333335, 245.0666666666667, 317.196 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 121.54311111111112, 217.58422222222222, 336.69233333333335, 454.9434444444445, 573.6125555555556, 625.9526666666668, 850.2547777777778, 959.829888888889, 1072.797 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator11(a, b, c):
    X = np.array([
    [ 0.0, 111.27411111111111, 234.13522222222224, 336.8713333333334, 423.82644444444446, 553.8295555555555, 692.3616666666668, 743.8337777777779, 889.3748888888889, 946.894 ],
    [ 0.0, 20.60522222222222, 48.263444444444445, 69.04266666666666, 87.08288888888889, 113.58711111111111, 137.1283333333333, 142.17855555555553, 170.18877777777777, 194.683 ],
    [ 0.0, 0.5005555555555555, 1.1371111111111112, 1.7976666666666667, 2.191222222222222, 2.8437777777777775, 3.1713333333333336, 4.11888888888889, 4.220444444444444, 4.951 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 10.196111111111112, 22.092222222222222, 33.34633333333333, 40.16544444444445, 50.717555555555556, 60.091666666666654, 70.43477777777777, 92.88988888888889, 95.086 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator12(a, b, c):
    X = np.array([
    [ 16.349, 17.59477777777778, 20.766555555555556, 22.900333333333332, 22.859111111111112, 22.433888888888887, 26.172666666666665, 27.528444444444442, 27.749222222222222, 30.451999999999998 ],
    [ 0.0, 2.2222222222222223, 4.485444444444445, 6.886666666666667, 9.511888888888889, 11.88811111111111, 14.660333333333334, 16.510555555555555, 17.65577777777778, 18.646 ],
    [ 0.0, 11.299111111111111, 21.394222222222222, 33.52133333333333, 43.074444444444445, 54.739555555555555, 71.96566666666666, 70.95377777777777, 91.89788888888889, 103.31 ]
    ])
    X = np.transpose(X)
    y = np.array([ -10.006, 13.526333333333332, 37.32566666666666, 54.821, 89.35833333333333, 100.16566666666665, 138.682, 138.66233333333332, 166.91466666666665, 218.281 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)

def hitung_aktuator13(a, b, c):
    X = np.array([
    [ 0.0, 111.60011111111112, 234.63322222222223, 358.0783333333334, 465.33644444444445, 573.1595555555556, 692.0056666666667, 777.5537777777778, 806.3408888888889, 1020.13 ],
    [ 0.0, 10.030111111111111, 20.72122222222222, 34.07033333333333, 41.95344444444444, 57.114555555555555, 64.12866666666666, 72.06977777777777, 91.88988888888889, 99.697 ],
    [ -10.742, 12.401333333333332, 37.29566666666666, 65.975, 88.46433333333333, 108.63566666666665, 132.802, 158.1833333333333, 193.41566666666665, 196.851 ]
    ])
    X = np.transpose(X)
    y = np.array([ 0.0, 10.879111111111111, 21.99422222222222, 30.10733333333333, 40.239444444444445, 55.65555555555556, 64.51366666666665, 81.58477777777777, 82.22588888888889, 90.101 ])
    reg = linear_model.LinearRegression().fit(X, y)
    return round((reg.predict([[a, b, c]]))[0],2)